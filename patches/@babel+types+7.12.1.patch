diff --git a/node_modules/@babel/types/lib/index.d.ts b/node_modules/@babel/types/lib/index.d.ts
index ebf3e00..86dcfeb 100644
--- a/node_modules/@babel/types/lib/index.d.ts
+++ b/node_modules/@babel/types/lib/index.d.ts
@@ -1918,588 +1918,588 @@ export function tsTypeParameterInstantiation(params: Array<TSType>): TSTypeParam
 export function tsTypeParameterDeclaration(params: Array<TSTypeParameter>): TSTypeParameterDeclaration;
 export function tsTypeParameter(constraint: TSType | null | undefined, _default: TSType | null | undefined, name: string): TSTypeParameter;
 export function isAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): node is AnyTypeAnnotation;
-// export function assertAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is AnyTypeAnnotation;
+export function assertAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is AnyTypeAnnotation;
 export function isArgumentPlaceholder(node: object | null | undefined, opts?: object | null): node is ArgumentPlaceholder;
-// export function assertArgumentPlaceholder(node: object | null | undefined, opts?: object | null): asserts node is ArgumentPlaceholder;
+export function assertArgumentPlaceholder(node: object | null | undefined, opts?: object | null): asserts node is ArgumentPlaceholder;
 export function isArrayExpression(node: object | null | undefined, opts?: object | null): node is ArrayExpression;
-// export function assertArrayExpression(node: object | null | undefined, opts?: object | null): asserts node is ArrayExpression;
+export function assertArrayExpression(node: object | null | undefined, opts?: object | null): asserts node is ArrayExpression;
 export function isArrayPattern(node: object | null | undefined, opts?: object | null): node is ArrayPattern;
-// export function assertArrayPattern(node: object | null | undefined, opts?: object | null): asserts node is ArrayPattern;
+export function assertArrayPattern(node: object | null | undefined, opts?: object | null): asserts node is ArrayPattern;
 export function isArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ArrayTypeAnnotation;
-// export function assertArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ArrayTypeAnnotation;
+export function assertArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ArrayTypeAnnotation;
 export function isArrowFunctionExpression(node: object | null | undefined, opts?: object | null): node is ArrowFunctionExpression;
-// export function assertArrowFunctionExpression(node: object | null | undefined, opts?: object | null): asserts node is ArrowFunctionExpression;
+export function assertArrowFunctionExpression(node: object | null | undefined, opts?: object | null): asserts node is ArrowFunctionExpression;
 export function isAssignmentExpression(node: object | null | undefined, opts?: object | null): node is AssignmentExpression;
-// export function assertAssignmentExpression(node: object | null | undefined, opts?: object | null): asserts node is AssignmentExpression;
+export function assertAssignmentExpression(node: object | null | undefined, opts?: object | null): asserts node is AssignmentExpression;
 export function isAssignmentPattern(node: object | null | undefined, opts?: object | null): node is AssignmentPattern;
-// export function assertAssignmentPattern(node: object | null | undefined, opts?: object | null): asserts node is AssignmentPattern;
+export function assertAssignmentPattern(node: object | null | undefined, opts?: object | null): asserts node is AssignmentPattern;
 export function isAwaitExpression(node: object | null | undefined, opts?: object | null): node is AwaitExpression;
-// export function assertAwaitExpression(node: object | null | undefined, opts?: object | null): asserts node is AwaitExpression;
+export function assertAwaitExpression(node: object | null | undefined, opts?: object | null): asserts node is AwaitExpression;
 export function isBigIntLiteral(node: object | null | undefined, opts?: object | null): node is BigIntLiteral;
-// export function assertBigIntLiteral(node: object | null | undefined, opts?: object | null): asserts node is BigIntLiteral;
+export function assertBigIntLiteral(node: object | null | undefined, opts?: object | null): asserts node is BigIntLiteral;
 export function isBinary(node: object | null | undefined, opts?: object | null): node is Binary;
-// export function assertBinary(node: object | null | undefined, opts?: object | null): asserts node is Binary;
+export function assertBinary(node: object | null | undefined, opts?: object | null): asserts node is Binary;
 export function isBinaryExpression(node: object | null | undefined, opts?: object | null): node is BinaryExpression;
-// export function assertBinaryExpression(node: object | null | undefined, opts?: object | null): asserts node is BinaryExpression;
+export function assertBinaryExpression(node: object | null | undefined, opts?: object | null): asserts node is BinaryExpression;
 export function isBindExpression(node: object | null | undefined, opts?: object | null): node is BindExpression;
-// export function assertBindExpression(node: object | null | undefined, opts?: object | null): asserts node is BindExpression;
+export function assertBindExpression(node: object | null | undefined, opts?: object | null): asserts node is BindExpression;
 export function isBlock(node: object | null | undefined, opts?: object | null): node is Block;
-// export function assertBlock(node: object | null | undefined, opts?: object | null): asserts node is Block;
+export function assertBlock(node: object | null | undefined, opts?: object | null): asserts node is Block;
 export function isBlockParent(node: object | null | undefined, opts?: object | null): node is BlockParent;
-// export function assertBlockParent(node: object | null | undefined, opts?: object | null): asserts node is BlockParent;
+export function assertBlockParent(node: object | null | undefined, opts?: object | null): asserts node is BlockParent;
 export function isBlockStatement(node: object | null | undefined, opts?: object | null): node is BlockStatement;
-// export function assertBlockStatement(node: object | null | undefined, opts?: object | null): asserts node is BlockStatement;
+export function assertBlockStatement(node: object | null | undefined, opts?: object | null): asserts node is BlockStatement;
 export function isBooleanLiteral(node: object | null | undefined, opts?: object | null): node is BooleanLiteral;
-// export function assertBooleanLiteral(node: object | null | undefined, opts?: object | null): asserts node is BooleanLiteral;
+export function assertBooleanLiteral(node: object | null | undefined, opts?: object | null): asserts node is BooleanLiteral;
 export function isBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is BooleanLiteralTypeAnnotation;
-// export function assertBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is BooleanLiteralTypeAnnotation;
+export function assertBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is BooleanLiteralTypeAnnotation;
 export function isBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): node is BooleanTypeAnnotation;
-// export function assertBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is BooleanTypeAnnotation;
+export function assertBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is BooleanTypeAnnotation;
 export function isBreakStatement(node: object | null | undefined, opts?: object | null): node is BreakStatement;
-// export function assertBreakStatement(node: object | null | undefined, opts?: object | null): asserts node is BreakStatement;
+export function assertBreakStatement(node: object | null | undefined, opts?: object | null): asserts node is BreakStatement;
 export function isCallExpression(node: object | null | undefined, opts?: object | null): node is CallExpression;
-// export function assertCallExpression(node: object | null | undefined, opts?: object | null): asserts node is CallExpression;
+export function assertCallExpression(node: object | null | undefined, opts?: object | null): asserts node is CallExpression;
 export function isCatchClause(node: object | null | undefined, opts?: object | null): node is CatchClause;
-// export function assertCatchClause(node: object | null | undefined, opts?: object | null): asserts node is CatchClause;
+export function assertCatchClause(node: object | null | undefined, opts?: object | null): asserts node is CatchClause;
 export function isClass(node: object | null | undefined, opts?: object | null): node is Class;
-// export function assertClass(node: object | null | undefined, opts?: object | null): asserts node is Class;
+export function assertClass(node: object | null | undefined, opts?: object | null): asserts node is Class;
 export function isClassBody(node: object | null | undefined, opts?: object | null): node is ClassBody;
-// export function assertClassBody(node: object | null | undefined, opts?: object | null): asserts node is ClassBody;
+export function assertClassBody(node: object | null | undefined, opts?: object | null): asserts node is ClassBody;
 export function isClassDeclaration(node: object | null | undefined, opts?: object | null): node is ClassDeclaration;
-// export function assertClassDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ClassDeclaration;
+export function assertClassDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ClassDeclaration;
 export function isClassExpression(node: object | null | undefined, opts?: object | null): node is ClassExpression;
-// export function assertClassExpression(node: object | null | undefined, opts?: object | null): asserts node is ClassExpression;
+export function assertClassExpression(node: object | null | undefined, opts?: object | null): asserts node is ClassExpression;
 export function isClassImplements(node: object | null | undefined, opts?: object | null): node is ClassImplements;
-// export function assertClassImplements(node: object | null | undefined, opts?: object | null): asserts node is ClassImplements;
+export function assertClassImplements(node: object | null | undefined, opts?: object | null): asserts node is ClassImplements;
 export function isClassMethod(node: object | null | undefined, opts?: object | null): node is ClassMethod;
-// export function assertClassMethod(node: object | null | undefined, opts?: object | null): asserts node is ClassMethod;
+export function assertClassMethod(node: object | null | undefined, opts?: object | null): asserts node is ClassMethod;
 export function isClassPrivateMethod(node: object | null | undefined, opts?: object | null): node is ClassPrivateMethod;
-// export function assertClassPrivateMethod(node: object | null | undefined, opts?: object | null): asserts node is ClassPrivateMethod;
+export function assertClassPrivateMethod(node: object | null | undefined, opts?: object | null): asserts node is ClassPrivateMethod;
 export function isClassPrivateProperty(node: object | null | undefined, opts?: object | null): node is ClassPrivateProperty;
-// export function assertClassPrivateProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassPrivateProperty;
+export function assertClassPrivateProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassPrivateProperty;
 export function isClassProperty(node: object | null | undefined, opts?: object | null): node is ClassProperty;
-// export function assertClassProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassProperty;
+export function assertClassProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassProperty;
 export function isCompletionStatement(node: object | null | undefined, opts?: object | null): node is CompletionStatement;
-// export function assertCompletionStatement(node: object | null | undefined, opts?: object | null): asserts node is CompletionStatement;
+export function assertCompletionStatement(node: object | null | undefined, opts?: object | null): asserts node is CompletionStatement;
 export function isConditional(node: object | null | undefined, opts?: object | null): node is Conditional;
-// export function assertConditional(node: object | null | undefined, opts?: object | null): asserts node is Conditional;
+export function assertConditional(node: object | null | undefined, opts?: object | null): asserts node is Conditional;
 export function isConditionalExpression(node: object | null | undefined, opts?: object | null): node is ConditionalExpression;
-// export function assertConditionalExpression(node: object | null | undefined, opts?: object | null): asserts node is ConditionalExpression;
+export function assertConditionalExpression(node: object | null | undefined, opts?: object | null): asserts node is ConditionalExpression;
 export function isContinueStatement(node: object | null | undefined, opts?: object | null): node is ContinueStatement;
-// export function assertContinueStatement(node: object | null | undefined, opts?: object | null): asserts node is ContinueStatement;
+export function assertContinueStatement(node: object | null | undefined, opts?: object | null): asserts node is ContinueStatement;
 export function isDebuggerStatement(node: object | null | undefined, opts?: object | null): node is DebuggerStatement;
-// export function assertDebuggerStatement(node: object | null | undefined, opts?: object | null): asserts node is DebuggerStatement;
+export function assertDebuggerStatement(node: object | null | undefined, opts?: object | null): asserts node is DebuggerStatement;
 export function isDecimalLiteral(node: object | null | undefined, opts?: object | null): node is DecimalLiteral;
-// export function assertDecimalLiteral(node: object | null | undefined, opts?: object | null): asserts node is DecimalLiteral;
+export function assertDecimalLiteral(node: object | null | undefined, opts?: object | null): asserts node is DecimalLiteral;
 export function isDeclaration(node: object | null | undefined, opts?: object | null): node is Declaration;
-// export function assertDeclaration(node: object | null | undefined, opts?: object | null): asserts node is Declaration;
+export function assertDeclaration(node: object | null | undefined, opts?: object | null): asserts node is Declaration;
 export function isDeclareClass(node: object | null | undefined, opts?: object | null): node is DeclareClass;
-// export function assertDeclareClass(node: object | null | undefined, opts?: object | null): asserts node is DeclareClass;
+export function assertDeclareClass(node: object | null | undefined, opts?: object | null): asserts node is DeclareClass;
 export function isDeclareExportAllDeclaration(node: object | null | undefined, opts?: object | null): node is DeclareExportAllDeclaration;
-// export function assertDeclareExportAllDeclaration(node: object | null | undefined, opts?: object | null): asserts node is DeclareExportAllDeclaration;
+export function assertDeclareExportAllDeclaration(node: object | null | undefined, opts?: object | null): asserts node is DeclareExportAllDeclaration;
 export function isDeclareExportDeclaration(node: object | null | undefined, opts?: object | null): node is DeclareExportDeclaration;
-// export function assertDeclareExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is DeclareExportDeclaration;
+export function assertDeclareExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is DeclareExportDeclaration;
 export function isDeclareFunction(node: object | null | undefined, opts?: object | null): node is DeclareFunction;
-// export function assertDeclareFunction(node: object | null | undefined, opts?: object | null): asserts node is DeclareFunction;
+export function assertDeclareFunction(node: object | null | undefined, opts?: object | null): asserts node is DeclareFunction;
 export function isDeclareInterface(node: object | null | undefined, opts?: object | null): node is DeclareInterface;
-// export function assertDeclareInterface(node: object | null | undefined, opts?: object | null): asserts node is DeclareInterface;
+export function assertDeclareInterface(node: object | null | undefined, opts?: object | null): asserts node is DeclareInterface;
 export function isDeclareModule(node: object | null | undefined, opts?: object | null): node is DeclareModule;
-// export function assertDeclareModule(node: object | null | undefined, opts?: object | null): asserts node is DeclareModule;
+export function assertDeclareModule(node: object | null | undefined, opts?: object | null): asserts node is DeclareModule;
 export function isDeclareModuleExports(node: object | null | undefined, opts?: object | null): node is DeclareModuleExports;
-// export function assertDeclareModuleExports(node: object | null | undefined, opts?: object | null): asserts node is DeclareModuleExports;
+export function assertDeclareModuleExports(node: object | null | undefined, opts?: object | null): asserts node is DeclareModuleExports;
 export function isDeclareOpaqueType(node: object | null | undefined, opts?: object | null): node is DeclareOpaqueType;
-// export function assertDeclareOpaqueType(node: object | null | undefined, opts?: object | null): asserts node is DeclareOpaqueType;
+export function assertDeclareOpaqueType(node: object | null | undefined, opts?: object | null): asserts node is DeclareOpaqueType;
 export function isDeclareTypeAlias(node: object | null | undefined, opts?: object | null): node is DeclareTypeAlias;
-// export function assertDeclareTypeAlias(node: object | null | undefined, opts?: object | null): asserts node is DeclareTypeAlias;
+export function assertDeclareTypeAlias(node: object | null | undefined, opts?: object | null): asserts node is DeclareTypeAlias;
 export function isDeclareVariable(node: object | null | undefined, opts?: object | null): node is DeclareVariable;
-// export function assertDeclareVariable(node: object | null | undefined, opts?: object | null): asserts node is DeclareVariable;
+export function assertDeclareVariable(node: object | null | undefined, opts?: object | null): asserts node is DeclareVariable;
 export function isDeclaredPredicate(node: object | null | undefined, opts?: object | null): node is DeclaredPredicate;
-// export function assertDeclaredPredicate(node: object | null | undefined, opts?: object | null): asserts node is DeclaredPredicate;
+export function assertDeclaredPredicate(node: object | null | undefined, opts?: object | null): asserts node is DeclaredPredicate;
 export function isDecorator(node: object | null | undefined, opts?: object | null): node is Decorator;
-// export function assertDecorator(node: object | null | undefined, opts?: object | null): asserts node is Decorator;
+export function assertDecorator(node: object | null | undefined, opts?: object | null): asserts node is Decorator;
 export function isDirective(node: object | null | undefined, opts?: object | null): node is Directive;
-// export function assertDirective(node: object | null | undefined, opts?: object | null): asserts node is Directive;
+export function assertDirective(node: object | null | undefined, opts?: object | null): asserts node is Directive;
 export function isDirectiveLiteral(node: object | null | undefined, opts?: object | null): node is DirectiveLiteral;
-// export function assertDirectiveLiteral(node: object | null | undefined, opts?: object | null): asserts node is DirectiveLiteral;
+export function assertDirectiveLiteral(node: object | null | undefined, opts?: object | null): asserts node is DirectiveLiteral;
 export function isDoExpression(node: object | null | undefined, opts?: object | null): node is DoExpression;
-// export function assertDoExpression(node: object | null | undefined, opts?: object | null): asserts node is DoExpression;
+export function assertDoExpression(node: object | null | undefined, opts?: object | null): asserts node is DoExpression;
 export function isDoWhileStatement(node: object | null | undefined, opts?: object | null): node is DoWhileStatement;
-// export function assertDoWhileStatement(node: object | null | undefined, opts?: object | null): asserts node is DoWhileStatement;
+export function assertDoWhileStatement(node: object | null | undefined, opts?: object | null): asserts node is DoWhileStatement;
 export function isEmptyStatement(node: object | null | undefined, opts?: object | null): node is EmptyStatement;
-// export function assertEmptyStatement(node: object | null | undefined, opts?: object | null): asserts node is EmptyStatement;
+export function assertEmptyStatement(node: object | null | undefined, opts?: object | null): asserts node is EmptyStatement;
 export function isEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): node is EmptyTypeAnnotation;
-// export function assertEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is EmptyTypeAnnotation;
+export function assertEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is EmptyTypeAnnotation;
 export function isEnumBody(node: object | null | undefined, opts?: object | null): node is EnumBody;
-// export function assertEnumBody(node: object | null | undefined, opts?: object | null): asserts node is EnumBody;
+export function assertEnumBody(node: object | null | undefined, opts?: object | null): asserts node is EnumBody;
 export function isEnumBooleanBody(node: object | null | undefined, opts?: object | null): node is EnumBooleanBody;
-// export function assertEnumBooleanBody(node: object | null | undefined, opts?: object | null): asserts node is EnumBooleanBody;
+export function assertEnumBooleanBody(node: object | null | undefined, opts?: object | null): asserts node is EnumBooleanBody;
 export function isEnumBooleanMember(node: object | null | undefined, opts?: object | null): node is EnumBooleanMember;
-// export function assertEnumBooleanMember(node: object | null | undefined, opts?: object | null): asserts node is EnumBooleanMember;
+export function assertEnumBooleanMember(node: object | null | undefined, opts?: object | null): asserts node is EnumBooleanMember;
 export function isEnumDeclaration(node: object | null | undefined, opts?: object | null): node is EnumDeclaration;
-// export function assertEnumDeclaration(node: object | null | undefined, opts?: object | null): asserts node is EnumDeclaration;
+export function assertEnumDeclaration(node: object | null | undefined, opts?: object | null): asserts node is EnumDeclaration;
 export function isEnumDefaultedMember(node: object | null | undefined, opts?: object | null): node is EnumDefaultedMember;
-// export function assertEnumDefaultedMember(node: object | null | undefined, opts?: object | null): asserts node is EnumDefaultedMember;
+export function assertEnumDefaultedMember(node: object | null | undefined, opts?: object | null): asserts node is EnumDefaultedMember;
 export function isEnumMember(node: object | null | undefined, opts?: object | null): node is EnumMember;
-// export function assertEnumMember(node: object | null | undefined, opts?: object | null): asserts node is EnumMember;
+export function assertEnumMember(node: object | null | undefined, opts?: object | null): asserts node is EnumMember;
 export function isEnumNumberBody(node: object | null | undefined, opts?: object | null): node is EnumNumberBody;
-// export function assertEnumNumberBody(node: object | null | undefined, opts?: object | null): asserts node is EnumNumberBody;
+export function assertEnumNumberBody(node: object | null | undefined, opts?: object | null): asserts node is EnumNumberBody;
 export function isEnumNumberMember(node: object | null | undefined, opts?: object | null): node is EnumNumberMember;
-// export function assertEnumNumberMember(node: object | null | undefined, opts?: object | null): asserts node is EnumNumberMember;
+export function assertEnumNumberMember(node: object | null | undefined, opts?: object | null): asserts node is EnumNumberMember;
 export function isEnumStringBody(node: object | null | undefined, opts?: object | null): node is EnumStringBody;
-// export function assertEnumStringBody(node: object | null | undefined, opts?: object | null): asserts node is EnumStringBody;
+export function assertEnumStringBody(node: object | null | undefined, opts?: object | null): asserts node is EnumStringBody;
 export function isEnumStringMember(node: object | null | undefined, opts?: object | null): node is EnumStringMember;
-// export function assertEnumStringMember(node: object | null | undefined, opts?: object | null): asserts node is EnumStringMember;
+export function assertEnumStringMember(node: object | null | undefined, opts?: object | null): asserts node is EnumStringMember;
 export function isEnumSymbolBody(node: object | null | undefined, opts?: object | null): node is EnumSymbolBody;
-// export function assertEnumSymbolBody(node: object | null | undefined, opts?: object | null): asserts node is EnumSymbolBody;
+export function assertEnumSymbolBody(node: object | null | undefined, opts?: object | null): asserts node is EnumSymbolBody;
 export function isExistsTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ExistsTypeAnnotation;
-// export function assertExistsTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ExistsTypeAnnotation;
+export function assertExistsTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ExistsTypeAnnotation;
 export function isExportAllDeclaration(node: object | null | undefined, opts?: object | null): node is ExportAllDeclaration;
-// export function assertExportAllDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportAllDeclaration;
+export function assertExportAllDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportAllDeclaration;
 export function isExportDeclaration(node: object | null | undefined, opts?: object | null): node is ExportDeclaration;
-// export function assertExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportDeclaration;
+export function assertExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportDeclaration;
 export function isExportDefaultDeclaration(node: object | null | undefined, opts?: object | null): node is ExportDefaultDeclaration;
-// export function assertExportDefaultDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportDefaultDeclaration;
+export function assertExportDefaultDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportDefaultDeclaration;
 export function isExportDefaultSpecifier(node: object | null | undefined, opts?: object | null): node is ExportDefaultSpecifier;
-// export function assertExportDefaultSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportDefaultSpecifier;
+export function assertExportDefaultSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportDefaultSpecifier;
 export function isExportNamedDeclaration(node: object | null | undefined, opts?: object | null): node is ExportNamedDeclaration;
-// export function assertExportNamedDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportNamedDeclaration;
+export function assertExportNamedDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportNamedDeclaration;
 export function isExportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): node is ExportNamespaceSpecifier;
-// export function assertExportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportNamespaceSpecifier;
+export function assertExportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportNamespaceSpecifier;
 export function isExportSpecifier(node: object | null | undefined, opts?: object | null): node is ExportSpecifier;
-// export function assertExportSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportSpecifier;
+export function assertExportSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportSpecifier;
 export function isExpression(node: object | null | undefined, opts?: object | null): node is Expression;
-// export function assertExpression(node: object | null | undefined, opts?: object | null): asserts node is Expression;
+export function assertExpression(node: object | null | undefined, opts?: object | null): asserts node is Expression;
 export function isExpressionStatement(node: object | null | undefined, opts?: object | null): node is ExpressionStatement;
-// export function assertExpressionStatement(node: object | null | undefined, opts?: object | null): asserts node is ExpressionStatement;
+export function assertExpressionStatement(node: object | null | undefined, opts?: object | null): asserts node is ExpressionStatement;
 export function isExpressionWrapper(node: object | null | undefined, opts?: object | null): node is ExpressionWrapper;
-// export function assertExpressionWrapper(node: object | null | undefined, opts?: object | null): asserts node is ExpressionWrapper;
+export function assertExpressionWrapper(node: object | null | undefined, opts?: object | null): asserts node is ExpressionWrapper;
 export function isFile(node: object | null | undefined, opts?: object | null): node is File;
-// export function assertFile(node: object | null | undefined, opts?: object | null): asserts node is File;
+export function assertFile(node: object | null | undefined, opts?: object | null): asserts node is File;
 export function isFlow(node: object | null | undefined, opts?: object | null): node is Flow;
-// export function assertFlow(node: object | null | undefined, opts?: object | null): asserts node is Flow;
+export function assertFlow(node: object | null | undefined, opts?: object | null): asserts node is Flow;
 export function isFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): node is FlowBaseAnnotation;
-// export function assertFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): asserts node is FlowBaseAnnotation;
+export function assertFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): asserts node is FlowBaseAnnotation;
 export function isFlowDeclaration(node: object | null | undefined, opts?: object | null): node is FlowDeclaration;
-// export function assertFlowDeclaration(node: object | null | undefined, opts?: object | null): asserts node is FlowDeclaration;
+export function assertFlowDeclaration(node: object | null | undefined, opts?: object | null): asserts node is FlowDeclaration;
 export function isFlowPredicate(node: object | null | undefined, opts?: object | null): node is FlowPredicate;
-// export function assertFlowPredicate(node: object | null | undefined, opts?: object | null): asserts node is FlowPredicate;
+export function assertFlowPredicate(node: object | null | undefined, opts?: object | null): asserts node is FlowPredicate;
 export function isFlowType(node: object | null | undefined, opts?: object | null): node is FlowType;
-// export function assertFlowType(node: object | null | undefined, opts?: object | null): asserts node is FlowType;
+export function assertFlowType(node: object | null | undefined, opts?: object | null): asserts node is FlowType;
 export function isFor(node: object | null | undefined, opts?: object | null): node is For;
-// export function assertFor(node: object | null | undefined, opts?: object | null): asserts node is For;
+export function assertFor(node: object | null | undefined, opts?: object | null): asserts node is For;
 export function isForInStatement(node: object | null | undefined, opts?: object | null): node is ForInStatement;
-// export function assertForInStatement(node: object | null | undefined, opts?: object | null): asserts node is ForInStatement;
+export function assertForInStatement(node: object | null | undefined, opts?: object | null): asserts node is ForInStatement;
 export function isForOfStatement(node: object | null | undefined, opts?: object | null): node is ForOfStatement;
-// export function assertForOfStatement(node: object | null | undefined, opts?: object | null): asserts node is ForOfStatement;
+export function assertForOfStatement(node: object | null | undefined, opts?: object | null): asserts node is ForOfStatement;
 export function isForStatement(node: object | null | undefined, opts?: object | null): node is ForStatement;
-// export function assertForStatement(node: object | null | undefined, opts?: object | null): asserts node is ForStatement;
+export function assertForStatement(node: object | null | undefined, opts?: object | null): asserts node is ForStatement;
 export function isForXStatement(node: object | null | undefined, opts?: object | null): node is ForXStatement;
-// export function assertForXStatement(node: object | null | undefined, opts?: object | null): asserts node is ForXStatement;
+export function assertForXStatement(node: object | null | undefined, opts?: object | null): asserts node is ForXStatement;
 export function isFunction(node: object | null | undefined, opts?: object | null): node is Function;
-// export function assertFunction(node: object | null | undefined, opts?: object | null): asserts node is Function;
+export function assertFunction(node: object | null | undefined, opts?: object | null): asserts node is Function;
 export function isFunctionDeclaration(node: object | null | undefined, opts?: object | null): node is FunctionDeclaration;
-// export function assertFunctionDeclaration(node: object | null | undefined, opts?: object | null): asserts node is FunctionDeclaration;
+export function assertFunctionDeclaration(node: object | null | undefined, opts?: object | null): asserts node is FunctionDeclaration;
 export function isFunctionExpression(node: object | null | undefined, opts?: object | null): node is FunctionExpression;
-// export function assertFunctionExpression(node: object | null | undefined, opts?: object | null): asserts node is FunctionExpression;
+export function assertFunctionExpression(node: object | null | undefined, opts?: object | null): asserts node is FunctionExpression;
 export function isFunctionParent(node: object | null | undefined, opts?: object | null): node is FunctionParent;
-// export function assertFunctionParent(node: object | null | undefined, opts?: object | null): asserts node is FunctionParent;
+export function assertFunctionParent(node: object | null | undefined, opts?: object | null): asserts node is FunctionParent;
 export function isFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is FunctionTypeAnnotation;
-// export function assertFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is FunctionTypeAnnotation;
+export function assertFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is FunctionTypeAnnotation;
 export function isFunctionTypeParam(node: object | null | undefined, opts?: object | null): node is FunctionTypeParam;
-// export function assertFunctionTypeParam(node: object | null | undefined, opts?: object | null): asserts node is FunctionTypeParam;
+export function assertFunctionTypeParam(node: object | null | undefined, opts?: object | null): asserts node is FunctionTypeParam;
 export function isGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): node is GenericTypeAnnotation;
-// export function assertGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is GenericTypeAnnotation;
+export function assertGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is GenericTypeAnnotation;
 export function isIdentifier(node: object | null | undefined, opts?: object | null): node is Identifier;
-// export function assertIdentifier(node: object | null | undefined, opts?: object | null): asserts node is Identifier;
+export function assertIdentifier(node: object | null | undefined, opts?: object | null): asserts node is Identifier;
 export function isIfStatement(node: object | null | undefined, opts?: object | null): node is IfStatement;
-// export function assertIfStatement(node: object | null | undefined, opts?: object | null): asserts node is IfStatement;
+export function assertIfStatement(node: object | null | undefined, opts?: object | null): asserts node is IfStatement;
 export function isImmutable(node: object | null | undefined, opts?: object | null): node is Immutable;
-// export function assertImmutable(node: object | null | undefined, opts?: object | null): asserts node is Immutable;
+export function assertImmutable(node: object | null | undefined, opts?: object | null): asserts node is Immutable;
 export function isImport(node: object | null | undefined, opts?: object | null): node is Import;
-// export function assertImport(node: object | null | undefined, opts?: object | null): asserts node is Import;
+export function assertImport(node: object | null | undefined, opts?: object | null): asserts node is Import;
 export function isImportAttribute(node: object | null | undefined, opts?: object | null): node is ImportAttribute;
-// export function assertImportAttribute(node: object | null | undefined, opts?: object | null): asserts node is ImportAttribute;
+export function assertImportAttribute(node: object | null | undefined, opts?: object | null): asserts node is ImportAttribute;
 export function isImportDeclaration(node: object | null | undefined, opts?: object | null): node is ImportDeclaration;
-// export function assertImportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ImportDeclaration;
+export function assertImportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ImportDeclaration;
 export function isImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): node is ImportDefaultSpecifier;
-// export function assertImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportDefaultSpecifier;
+export function assertImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportDefaultSpecifier;
 export function isImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): node is ImportNamespaceSpecifier;
-// export function assertImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportNamespaceSpecifier;
+export function assertImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportNamespaceSpecifier;
 export function isImportSpecifier(node: object | null | undefined, opts?: object | null): node is ImportSpecifier;
-// export function assertImportSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportSpecifier;
+export function assertImportSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportSpecifier;
 export function isInferredPredicate(node: object | null | undefined, opts?: object | null): node is InferredPredicate;
-// export function assertInferredPredicate(node: object | null | undefined, opts?: object | null): asserts node is InferredPredicate;
+export function assertInferredPredicate(node: object | null | undefined, opts?: object | null): asserts node is InferredPredicate;
 export function isInterfaceDeclaration(node: object | null | undefined, opts?: object | null): node is InterfaceDeclaration;
-// export function assertInterfaceDeclaration(node: object | null | undefined, opts?: object | null): asserts node is InterfaceDeclaration;
+export function assertInterfaceDeclaration(node: object | null | undefined, opts?: object | null): asserts node is InterfaceDeclaration;
 export function isInterfaceExtends(node: object | null | undefined, opts?: object | null): node is InterfaceExtends;
-// export function assertInterfaceExtends(node: object | null | undefined, opts?: object | null): asserts node is InterfaceExtends;
+export function assertInterfaceExtends(node: object | null | undefined, opts?: object | null): asserts node is InterfaceExtends;
 export function isInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): node is InterfaceTypeAnnotation;
-// export function assertInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is InterfaceTypeAnnotation;
+export function assertInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is InterfaceTypeAnnotation;
 export function isInterpreterDirective(node: object | null | undefined, opts?: object | null): node is InterpreterDirective;
-// export function assertInterpreterDirective(node: object | null | undefined, opts?: object | null): asserts node is InterpreterDirective;
+export function assertInterpreterDirective(node: object | null | undefined, opts?: object | null): asserts node is InterpreterDirective;
 export function isIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is IntersectionTypeAnnotation;
-// export function assertIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is IntersectionTypeAnnotation;
+export function assertIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is IntersectionTypeAnnotation;
 export function isJSX(node: object | null | undefined, opts?: object | null): node is JSX;
-// export function assertJSX(node: object | null | undefined, opts?: object | null): asserts node is JSX;
+export function assertJSX(node: object | null | undefined, opts?: object | null): asserts node is JSX;
 export function isJSXAttribute(node: object | null | undefined, opts?: object | null): node is JSXAttribute;
-// export function assertJSXAttribute(node: object | null | undefined, opts?: object | null): asserts node is JSXAttribute;
+export function assertJSXAttribute(node: object | null | undefined, opts?: object | null): asserts node is JSXAttribute;
 export function isJSXClosingElement(node: object | null | undefined, opts?: object | null): node is JSXClosingElement;
-// export function assertJSXClosingElement(node: object | null | undefined, opts?: object | null): asserts node is JSXClosingElement;
+export function assertJSXClosingElement(node: object | null | undefined, opts?: object | null): asserts node is JSXClosingElement;
 export function isJSXClosingFragment(node: object | null | undefined, opts?: object | null): node is JSXClosingFragment;
-// export function assertJSXClosingFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXClosingFragment;
+export function assertJSXClosingFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXClosingFragment;
 export function isJSXElement(node: object | null | undefined, opts?: object | null): node is JSXElement;
-// export function assertJSXElement(node: object | null | undefined, opts?: object | null): asserts node is JSXElement;
+export function assertJSXElement(node: object | null | undefined, opts?: object | null): asserts node is JSXElement;
 export function isJSXEmptyExpression(node: object | null | undefined, opts?: object | null): node is JSXEmptyExpression;
-// export function assertJSXEmptyExpression(node: object | null | undefined, opts?: object | null): asserts node is JSXEmptyExpression;
+export function assertJSXEmptyExpression(node: object | null | undefined, opts?: object | null): asserts node is JSXEmptyExpression;
 export function isJSXExpressionContainer(node: object | null | undefined, opts?: object | null): node is JSXExpressionContainer;
-// export function assertJSXExpressionContainer(node: object | null | undefined, opts?: object | null): asserts node is JSXExpressionContainer;
+export function assertJSXExpressionContainer(node: object | null | undefined, opts?: object | null): asserts node is JSXExpressionContainer;
 export function isJSXFragment(node: object | null | undefined, opts?: object | null): node is JSXFragment;
-// export function assertJSXFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXFragment;
+export function assertJSXFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXFragment;
 export function isJSXIdentifier(node: object | null | undefined, opts?: object | null): node is JSXIdentifier;
-// export function assertJSXIdentifier(node: object | null | undefined, opts?: object | null): asserts node is JSXIdentifier;
+export function assertJSXIdentifier(node: object | null | undefined, opts?: object | null): asserts node is JSXIdentifier;
 export function isJSXMemberExpression(node: object | null | undefined, opts?: object | null): node is JSXMemberExpression;
-// export function assertJSXMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is JSXMemberExpression;
+export function assertJSXMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is JSXMemberExpression;
 export function isJSXNamespacedName(node: object | null | undefined, opts?: object | null): node is JSXNamespacedName;
-// export function assertJSXNamespacedName(node: object | null | undefined, opts?: object | null): asserts node is JSXNamespacedName;
+export function assertJSXNamespacedName(node: object | null | undefined, opts?: object | null): asserts node is JSXNamespacedName;
 export function isJSXOpeningElement(node: object | null | undefined, opts?: object | null): node is JSXOpeningElement;
-// export function assertJSXOpeningElement(node: object | null | undefined, opts?: object | null): asserts node is JSXOpeningElement;
+export function assertJSXOpeningElement(node: object | null | undefined, opts?: object | null): asserts node is JSXOpeningElement;
 export function isJSXOpeningFragment(node: object | null | undefined, opts?: object | null): node is JSXOpeningFragment;
-// export function assertJSXOpeningFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXOpeningFragment;
+export function assertJSXOpeningFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXOpeningFragment;
 export function isJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): node is JSXSpreadAttribute;
-// export function assertJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): asserts node is JSXSpreadAttribute;
+export function assertJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): asserts node is JSXSpreadAttribute;
 export function isJSXSpreadChild(node: object | null | undefined, opts?: object | null): node is JSXSpreadChild;
-// export function assertJSXSpreadChild(node: object | null | undefined, opts?: object | null): asserts node is JSXSpreadChild;
+export function assertJSXSpreadChild(node: object | null | undefined, opts?: object | null): asserts node is JSXSpreadChild;
 export function isJSXText(node: object | null | undefined, opts?: object | null): node is JSXText;
-// export function assertJSXText(node: object | null | undefined, opts?: object | null): asserts node is JSXText;
+export function assertJSXText(node: object | null | undefined, opts?: object | null): asserts node is JSXText;
 export function isLVal(node: object | null | undefined, opts?: object | null): node is LVal;
-// export function assertLVal(node: object | null | undefined, opts?: object | null): asserts node is LVal;
+export function assertLVal(node: object | null | undefined, opts?: object | null): asserts node is LVal;
 export function isLabeledStatement(node: object | null | undefined, opts?: object | null): node is LabeledStatement;
-// export function assertLabeledStatement(node: object | null | undefined, opts?: object | null): asserts node is LabeledStatement;
+export function assertLabeledStatement(node: object | null | undefined, opts?: object | null): asserts node is LabeledStatement;
 export function isLiteral(node: object | null | undefined, opts?: object | null): node is Literal;
-// export function assertLiteral(node: object | null | undefined, opts?: object | null): asserts node is Literal;
+export function assertLiteral(node: object | null | undefined, opts?: object | null): asserts node is Literal;
 export function isLogicalExpression(node: object | null | undefined, opts?: object | null): node is LogicalExpression;
-// export function assertLogicalExpression(node: object | null | undefined, opts?: object | null): asserts node is LogicalExpression;
+export function assertLogicalExpression(node: object | null | undefined, opts?: object | null): asserts node is LogicalExpression;
 export function isLoop(node: object | null | undefined, opts?: object | null): node is Loop;
-// export function assertLoop(node: object | null | undefined, opts?: object | null): asserts node is Loop;
+export function assertLoop(node: object | null | undefined, opts?: object | null): asserts node is Loop;
 export function isMemberExpression(node: object | null | undefined, opts?: object | null): node is MemberExpression;
-// export function assertMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is MemberExpression;
+export function assertMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is MemberExpression;
 export function isMetaProperty(node: object | null | undefined, opts?: object | null): node is MetaProperty;
-// export function assertMetaProperty(node: object | null | undefined, opts?: object | null): asserts node is MetaProperty;
+export function assertMetaProperty(node: object | null | undefined, opts?: object | null): asserts node is MetaProperty;
 export function isMethod(node: object | null | undefined, opts?: object | null): node is Method;
-// export function assertMethod(node: object | null | undefined, opts?: object | null): asserts node is Method;
+export function assertMethod(node: object | null | undefined, opts?: object | null): asserts node is Method;
 export function isMixedTypeAnnotation(node: object | null | undefined, opts?: object | null): node is MixedTypeAnnotation;
-// export function assertMixedTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is MixedTypeAnnotation;
+export function assertMixedTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is MixedTypeAnnotation;
 export function isModuleDeclaration(node: object | null | undefined, opts?: object | null): node is ModuleDeclaration;
-// export function assertModuleDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ModuleDeclaration;
+export function assertModuleDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ModuleDeclaration;
 export function isModuleSpecifier(node: object | null | undefined, opts?: object | null): node is ModuleSpecifier;
-// export function assertModuleSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ModuleSpecifier;
+export function assertModuleSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ModuleSpecifier;
 export function isNewExpression(node: object | null | undefined, opts?: object | null): node is NewExpression;
-// export function assertNewExpression(node: object | null | undefined, opts?: object | null): asserts node is NewExpression;
+export function assertNewExpression(node: object | null | undefined, opts?: object | null): asserts node is NewExpression;
 export function isNoop(node: object | null | undefined, opts?: object | null): node is Noop;
-// export function assertNoop(node: object | null | undefined, opts?: object | null): asserts node is Noop;
+export function assertNoop(node: object | null | undefined, opts?: object | null): asserts node is Noop;
 export function isNullLiteral(node: object | null | undefined, opts?: object | null): node is NullLiteral;
-// export function assertNullLiteral(node: object | null | undefined, opts?: object | null): asserts node is NullLiteral;
+export function assertNullLiteral(node: object | null | undefined, opts?: object | null): asserts node is NullLiteral;
 export function isNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NullLiteralTypeAnnotation;
-// export function assertNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NullLiteralTypeAnnotation;
+export function assertNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NullLiteralTypeAnnotation;
 export function isNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NullableTypeAnnotation;
-// export function assertNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NullableTypeAnnotation;
+export function assertNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NullableTypeAnnotation;
 export function isNumberLiteral(node: object | null | undefined, opts?: object | null): boolean;
-// export function assertNumberLiteral(node: object | null | undefined, opts?: object | null): asserts node;
+export function assertNumberLiteral(node: object | null | undefined, opts?: object | null): asserts node;
 export function isNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NumberLiteralTypeAnnotation;
-// export function assertNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NumberLiteralTypeAnnotation;
+export function assertNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NumberLiteralTypeAnnotation;
 export function isNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NumberTypeAnnotation;
-// export function assertNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NumberTypeAnnotation;
+export function assertNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NumberTypeAnnotation;
 export function isNumericLiteral(node: object | null | undefined, opts?: object | null): node is NumericLiteral;
-// export function assertNumericLiteral(node: object | null | undefined, opts?: object | null): asserts node is NumericLiteral;
+export function assertNumericLiteral(node: object | null | undefined, opts?: object | null): asserts node is NumericLiteral;
 export function isObjectExpression(node: object | null | undefined, opts?: object | null): node is ObjectExpression;
-// export function assertObjectExpression(node: object | null | undefined, opts?: object | null): asserts node is ObjectExpression;
+export function assertObjectExpression(node: object | null | undefined, opts?: object | null): asserts node is ObjectExpression;
 export function isObjectMember(node: object | null | undefined, opts?: object | null): node is ObjectMember;
-// export function assertObjectMember(node: object | null | undefined, opts?: object | null): asserts node is ObjectMember;
+export function assertObjectMember(node: object | null | undefined, opts?: object | null): asserts node is ObjectMember;
 export function isObjectMethod(node: object | null | undefined, opts?: object | null): node is ObjectMethod;
-// export function assertObjectMethod(node: object | null | undefined, opts?: object | null): asserts node is ObjectMethod;
+export function assertObjectMethod(node: object | null | undefined, opts?: object | null): asserts node is ObjectMethod;
 export function isObjectPattern(node: object | null | undefined, opts?: object | null): node is ObjectPattern;
-// export function assertObjectPattern(node: object | null | undefined, opts?: object | null): asserts node is ObjectPattern;
+export function assertObjectPattern(node: object | null | undefined, opts?: object | null): asserts node is ObjectPattern;
 export function isObjectProperty(node: object | null | undefined, opts?: object | null): node is ObjectProperty;
-// export function assertObjectProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectProperty;
+export function assertObjectProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectProperty;
 export function isObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ObjectTypeAnnotation;
-// export function assertObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeAnnotation;
+export function assertObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeAnnotation;
 export function isObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeCallProperty;
-// export function assertObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeCallProperty;
+export function assertObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeCallProperty;
 export function isObjectTypeIndexer(node: object | null | undefined, opts?: object | null): node is ObjectTypeIndexer;
-// export function assertObjectTypeIndexer(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeIndexer;
+export function assertObjectTypeIndexer(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeIndexer;
 export function isObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): node is ObjectTypeInternalSlot;
-// export function assertObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeInternalSlot;
+export function assertObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeInternalSlot;
 export function isObjectTypeProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeProperty;
-// export function assertObjectTypeProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeProperty;
+export function assertObjectTypeProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeProperty;
 export function isObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeSpreadProperty;
-// export function assertObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeSpreadProperty;
+export function assertObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeSpreadProperty;
 export function isOpaqueType(node: object | null | undefined, opts?: object | null): node is OpaqueType;
-// export function assertOpaqueType(node: object | null | undefined, opts?: object | null): asserts node is OpaqueType;
+export function assertOpaqueType(node: object | null | undefined, opts?: object | null): asserts node is OpaqueType;
 export function isOptionalCallExpression(node: object | null | undefined, opts?: object | null): node is OptionalCallExpression;
-// export function assertOptionalCallExpression(node: object | null | undefined, opts?: object | null): asserts node is OptionalCallExpression;
+export function assertOptionalCallExpression(node: object | null | undefined, opts?: object | null): asserts node is OptionalCallExpression;
 export function isOptionalMemberExpression(node: object | null | undefined, opts?: object | null): node is OptionalMemberExpression;
-// export function assertOptionalMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is OptionalMemberExpression;
+export function assertOptionalMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is OptionalMemberExpression;
 export function isParenthesizedExpression(node: object | null | undefined, opts?: object | null): node is ParenthesizedExpression;
-// export function assertParenthesizedExpression(node: object | null | undefined, opts?: object | null): asserts node is ParenthesizedExpression;
+export function assertParenthesizedExpression(node: object | null | undefined, opts?: object | null): asserts node is ParenthesizedExpression;
 export function isPattern(node: object | null | undefined, opts?: object | null): node is Pattern;
-// export function assertPattern(node: object | null | undefined, opts?: object | null): asserts node is Pattern;
+export function assertPattern(node: object | null | undefined, opts?: object | null): asserts node is Pattern;
 export function isPatternLike(node: object | null | undefined, opts?: object | null): node is PatternLike;
-// export function assertPatternLike(node: object | null | undefined, opts?: object | null): asserts node is PatternLike;
+export function assertPatternLike(node: object | null | undefined, opts?: object | null): asserts node is PatternLike;
 export function isPipelineBareFunction(node: object | null | undefined, opts?: object | null): node is PipelineBareFunction;
-// export function assertPipelineBareFunction(node: object | null | undefined, opts?: object | null): asserts node is PipelineBareFunction;
+export function assertPipelineBareFunction(node: object | null | undefined, opts?: object | null): asserts node is PipelineBareFunction;
 export function isPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): node is PipelinePrimaryTopicReference;
-// export function assertPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): asserts node is PipelinePrimaryTopicReference;
+export function assertPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): asserts node is PipelinePrimaryTopicReference;
 export function isPipelineTopicExpression(node: object | null | undefined, opts?: object | null): node is PipelineTopicExpression;
-// export function assertPipelineTopicExpression(node: object | null | undefined, opts?: object | null): asserts node is PipelineTopicExpression;
+export function assertPipelineTopicExpression(node: object | null | undefined, opts?: object | null): asserts node is PipelineTopicExpression;
 export function isPlaceholder(node: object | null | undefined, opts?: object | null): node is Placeholder;
-// export function assertPlaceholder(node: object | null | undefined, opts?: object | null): asserts node is Placeholder;
+export function assertPlaceholder(node: object | null | undefined, opts?: object | null): asserts node is Placeholder;
 export function isPrivate(node: object | null | undefined, opts?: object | null): node is Private;
-// export function assertPrivate(node: object | null | undefined, opts?: object | null): asserts node is Private;
+export function assertPrivate(node: object | null | undefined, opts?: object | null): asserts node is Private;
 export function isPrivateName(node: object | null | undefined, opts?: object | null): node is PrivateName;
-// export function assertPrivateName(node: object | null | undefined, opts?: object | null): asserts node is PrivateName;
+export function assertPrivateName(node: object | null | undefined, opts?: object | null): asserts node is PrivateName;
 export function isProgram(node: object | null | undefined, opts?: object | null): node is Program;
-// export function assertProgram(node: object | null | undefined, opts?: object | null): asserts node is Program;
+export function assertProgram(node: object | null | undefined, opts?: object | null): asserts node is Program;
 export function isProperty(node: object | null | undefined, opts?: object | null): node is Property;
-// export function assertProperty(node: object | null | undefined, opts?: object | null): asserts node is Property;
+export function assertProperty(node: object | null | undefined, opts?: object | null): asserts node is Property;
 export function isPureish(node: object | null | undefined, opts?: object | null): node is Pureish;
-// export function assertPureish(node: object | null | undefined, opts?: object | null): asserts node is Pureish;
+export function assertPureish(node: object | null | undefined, opts?: object | null): asserts node is Pureish;
 export function isQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): node is QualifiedTypeIdentifier;
-// export function assertQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): asserts node is QualifiedTypeIdentifier;
+export function assertQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): asserts node is QualifiedTypeIdentifier;
 export function isRecordExpression(node: object | null | undefined, opts?: object | null): node is RecordExpression;
-// export function assertRecordExpression(node: object | null | undefined, opts?: object | null): asserts node is RecordExpression;
+export function assertRecordExpression(node: object | null | undefined, opts?: object | null): asserts node is RecordExpression;
 export function isRegExpLiteral(node: object | null | undefined, opts?: object | null): node is RegExpLiteral;
-// export function assertRegExpLiteral(node: object | null | undefined, opts?: object | null): asserts node is RegExpLiteral;
+export function assertRegExpLiteral(node: object | null | undefined, opts?: object | null): asserts node is RegExpLiteral;
 export function isRegexLiteral(node: object | null | undefined, opts?: object | null): boolean;
-// export function assertRegexLiteral(node: object | null | undefined, opts?: object | null): asserts node;
+export function assertRegexLiteral(node: object | null | undefined, opts?: object | null): asserts node;
 export function isRestElement(node: object | null | undefined, opts?: object | null): node is RestElement;
-// export function assertRestElement(node: object | null | undefined, opts?: object | null): asserts node is RestElement;
+export function assertRestElement(node: object | null | undefined, opts?: object | null): asserts node is RestElement;
 export function isRestProperty(node: object | null | undefined, opts?: object | null): boolean;
-// export function assertRestProperty(node: object | null | undefined, opts?: object | null): asserts node;
+export function assertRestProperty(node: object | null | undefined, opts?: object | null): asserts node;
 export function isReturnStatement(node: object | null | undefined, opts?: object | null): node is ReturnStatement;
-// export function assertReturnStatement(node: object | null | undefined, opts?: object | null): asserts node is ReturnStatement;
+export function assertReturnStatement(node: object | null | undefined, opts?: object | null): asserts node is ReturnStatement;
 export function isScopable(node: object | null | undefined, opts?: object | null): node is Scopable;
-// export function assertScopable(node: object | null | undefined, opts?: object | null): asserts node is Scopable;
+export function assertScopable(node: object | null | undefined, opts?: object | null): asserts node is Scopable;
 export function isSequenceExpression(node: object | null | undefined, opts?: object | null): node is SequenceExpression;
-// export function assertSequenceExpression(node: object | null | undefined, opts?: object | null): asserts node is SequenceExpression;
+export function assertSequenceExpression(node: object | null | undefined, opts?: object | null): asserts node is SequenceExpression;
 export function isSpreadElement(node: object | null | undefined, opts?: object | null): node is SpreadElement;
-// export function assertSpreadElement(node: object | null | undefined, opts?: object | null): asserts node is SpreadElement;
+export function assertSpreadElement(node: object | null | undefined, opts?: object | null): asserts node is SpreadElement;
 export function isSpreadProperty(node: object | null | undefined, opts?: object | null): boolean;
-// export function assertSpreadProperty(node: object | null | undefined, opts?: object | null): asserts node;
+export function assertSpreadProperty(node: object | null | undefined, opts?: object | null): asserts node;
 export function isStatement(node: object | null | undefined, opts?: object | null): node is Statement;
-// export function assertStatement(node: object | null | undefined, opts?: object | null): asserts node is Statement;
+export function assertStatement(node: object | null | undefined, opts?: object | null): asserts node is Statement;
 export function isStaticBlock(node: object | null | undefined, opts?: object | null): node is StaticBlock;
-// export function assertStaticBlock(node: object | null | undefined, opts?: object | null): asserts node is StaticBlock;
+export function assertStaticBlock(node: object | null | undefined, opts?: object | null): asserts node is StaticBlock;
 export function isStringLiteral(node: object | null | undefined, opts?: object | null): node is StringLiteral;
-// export function assertStringLiteral(node: object | null | undefined, opts?: object | null): asserts node is StringLiteral;
+export function assertStringLiteral(node: object | null | undefined, opts?: object | null): asserts node is StringLiteral;
 export function isStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is StringLiteralTypeAnnotation;
-// export function assertStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is StringLiteralTypeAnnotation;
+export function assertStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is StringLiteralTypeAnnotation;
 export function isStringTypeAnnotation(node: object | null | undefined, opts?: object | null): node is StringTypeAnnotation;
-// export function assertStringTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is StringTypeAnnotation;
+export function assertStringTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is StringTypeAnnotation;
 export function isSuper(node: object | null | undefined, opts?: object | null): node is Super;
-// export function assertSuper(node: object | null | undefined, opts?: object | null): asserts node is Super;
+export function assertSuper(node: object | null | undefined, opts?: object | null): asserts node is Super;
 export function isSwitchCase(node: object | null | undefined, opts?: object | null): node is SwitchCase;
-// export function assertSwitchCase(node: object | null | undefined, opts?: object | null): asserts node is SwitchCase;
+export function assertSwitchCase(node: object | null | undefined, opts?: object | null): asserts node is SwitchCase;
 export function isSwitchStatement(node: object | null | undefined, opts?: object | null): node is SwitchStatement;
-// export function assertSwitchStatement(node: object | null | undefined, opts?: object | null): asserts node is SwitchStatement;
+export function assertSwitchStatement(node: object | null | undefined, opts?: object | null): asserts node is SwitchStatement;
 export function isSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): node is SymbolTypeAnnotation;
-// export function assertSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is SymbolTypeAnnotation;
+export function assertSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is SymbolTypeAnnotation;
 export function isTSAnyKeyword(node: object | null | undefined, opts?: object | null): node is TSAnyKeyword;
-// export function assertTSAnyKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSAnyKeyword;
+export function assertTSAnyKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSAnyKeyword;
 export function isTSArrayType(node: object | null | undefined, opts?: object | null): node is TSArrayType;
-// export function assertTSArrayType(node: object | null | undefined, opts?: object | null): asserts node is TSArrayType;
+export function assertTSArrayType(node: object | null | undefined, opts?: object | null): asserts node is TSArrayType;
 export function isTSAsExpression(node: object | null | undefined, opts?: object | null): node is TSAsExpression;
-// export function assertTSAsExpression(node: object | null | undefined, opts?: object | null): asserts node is TSAsExpression;
+export function assertTSAsExpression(node: object | null | undefined, opts?: object | null): asserts node is TSAsExpression;
 export function isTSBaseType(node: object | null | undefined, opts?: object | null): node is TSBaseType;
-// export function assertTSBaseType(node: object | null | undefined, opts?: object | null): asserts node is TSBaseType;
+export function assertTSBaseType(node: object | null | undefined, opts?: object | null): asserts node is TSBaseType;
 export function isTSBigIntKeyword(node: object | null | undefined, opts?: object | null): node is TSBigIntKeyword;
-// export function assertTSBigIntKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSBigIntKeyword;
+export function assertTSBigIntKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSBigIntKeyword;
 export function isTSBooleanKeyword(node: object | null | undefined, opts?: object | null): node is TSBooleanKeyword;
-// export function assertTSBooleanKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSBooleanKeyword;
+export function assertTSBooleanKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSBooleanKeyword;
 export function isTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): node is TSCallSignatureDeclaration;
-// export function assertTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSCallSignatureDeclaration;
+export function assertTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSCallSignatureDeclaration;
 export function isTSConditionalType(node: object | null | undefined, opts?: object | null): node is TSConditionalType;
-// export function assertTSConditionalType(node: object | null | undefined, opts?: object | null): asserts node is TSConditionalType;
+export function assertTSConditionalType(node: object | null | undefined, opts?: object | null): asserts node is TSConditionalType;
 export function isTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): node is TSConstructSignatureDeclaration;
-// export function assertTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSConstructSignatureDeclaration;
+export function assertTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSConstructSignatureDeclaration;
 export function isTSConstructorType(node: object | null | undefined, opts?: object | null): node is TSConstructorType;
-// export function assertTSConstructorType(node: object | null | undefined, opts?: object | null): asserts node is TSConstructorType;
+export function assertTSConstructorType(node: object | null | undefined, opts?: object | null): asserts node is TSConstructorType;
 export function isTSDeclareFunction(node: object | null | undefined, opts?: object | null): node is TSDeclareFunction;
-// export function assertTSDeclareFunction(node: object | null | undefined, opts?: object | null): asserts node is TSDeclareFunction;
+export function assertTSDeclareFunction(node: object | null | undefined, opts?: object | null): asserts node is TSDeclareFunction;
 export function isTSDeclareMethod(node: object | null | undefined, opts?: object | null): node is TSDeclareMethod;
-// export function assertTSDeclareMethod(node: object | null | undefined, opts?: object | null): asserts node is TSDeclareMethod;
+export function assertTSDeclareMethod(node: object | null | undefined, opts?: object | null): asserts node is TSDeclareMethod;
 export function isTSEntityName(node: object | null | undefined, opts?: object | null): node is TSEntityName;
-// export function assertTSEntityName(node: object | null | undefined, opts?: object | null): asserts node is TSEntityName;
+export function assertTSEntityName(node: object | null | undefined, opts?: object | null): asserts node is TSEntityName;
 export function isTSEnumDeclaration(node: object | null | undefined, opts?: object | null): node is TSEnumDeclaration;
-// export function assertTSEnumDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSEnumDeclaration;
+export function assertTSEnumDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSEnumDeclaration;
 export function isTSEnumMember(node: object | null | undefined, opts?: object | null): node is TSEnumMember;
-// export function assertTSEnumMember(node: object | null | undefined, opts?: object | null): asserts node is TSEnumMember;
+export function assertTSEnumMember(node: object | null | undefined, opts?: object | null): asserts node is TSEnumMember;
 export function isTSExportAssignment(node: object | null | undefined, opts?: object | null): node is TSExportAssignment;
-// export function assertTSExportAssignment(node: object | null | undefined, opts?: object | null): asserts node is TSExportAssignment;
+export function assertTSExportAssignment(node: object | null | undefined, opts?: object | null): asserts node is TSExportAssignment;
 export function isTSExpressionWithTypeArguments(node: object | null | undefined, opts?: object | null): node is TSExpressionWithTypeArguments;
-// export function assertTSExpressionWithTypeArguments(node: object | null | undefined, opts?: object | null): asserts node is TSExpressionWithTypeArguments;
+export function assertTSExpressionWithTypeArguments(node: object | null | undefined, opts?: object | null): asserts node is TSExpressionWithTypeArguments;
 export function isTSExternalModuleReference(node: object | null | undefined, opts?: object | null): node is TSExternalModuleReference;
-// export function assertTSExternalModuleReference(node: object | null | undefined, opts?: object | null): asserts node is TSExternalModuleReference;
+export function assertTSExternalModuleReference(node: object | null | undefined, opts?: object | null): asserts node is TSExternalModuleReference;
 export function isTSFunctionType(node: object | null | undefined, opts?: object | null): node is TSFunctionType;
-// export function assertTSFunctionType(node: object | null | undefined, opts?: object | null): asserts node is TSFunctionType;
+export function assertTSFunctionType(node: object | null | undefined, opts?: object | null): asserts node is TSFunctionType;
 export function isTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): node is TSImportEqualsDeclaration;
-// export function assertTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSImportEqualsDeclaration;
+export function assertTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSImportEqualsDeclaration;
 export function isTSImportType(node: object | null | undefined, opts?: object | null): node is TSImportType;
-// export function assertTSImportType(node: object | null | undefined, opts?: object | null): asserts node is TSImportType;
+export function assertTSImportType(node: object | null | undefined, opts?: object | null): asserts node is TSImportType;
 export function isTSIndexSignature(node: object | null | undefined, opts?: object | null): node is TSIndexSignature;
-// export function assertTSIndexSignature(node: object | null | undefined, opts?: object | null): asserts node is TSIndexSignature;
+export function assertTSIndexSignature(node: object | null | undefined, opts?: object | null): asserts node is TSIndexSignature;
 export function isTSIndexedAccessType(node: object | null | undefined, opts?: object | null): node is TSIndexedAccessType;
-// export function assertTSIndexedAccessType(node: object | null | undefined, opts?: object | null): asserts node is TSIndexedAccessType;
+export function assertTSIndexedAccessType(node: object | null | undefined, opts?: object | null): asserts node is TSIndexedAccessType;
 export function isTSInferType(node: object | null | undefined, opts?: object | null): node is TSInferType;
-// export function assertTSInferType(node: object | null | undefined, opts?: object | null): asserts node is TSInferType;
+export function assertTSInferType(node: object | null | undefined, opts?: object | null): asserts node is TSInferType;
 export function isTSInterfaceBody(node: object | null | undefined, opts?: object | null): node is TSInterfaceBody;
-// export function assertTSInterfaceBody(node: object | null | undefined, opts?: object | null): asserts node is TSInterfaceBody;
+export function assertTSInterfaceBody(node: object | null | undefined, opts?: object | null): asserts node is TSInterfaceBody;
 export function isTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): node is TSInterfaceDeclaration;
-// export function assertTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSInterfaceDeclaration;
+export function assertTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSInterfaceDeclaration;
 export function isTSIntersectionType(node: object | null | undefined, opts?: object | null): node is TSIntersectionType;
-// export function assertTSIntersectionType(node: object | null | undefined, opts?: object | null): asserts node is TSIntersectionType;
+export function assertTSIntersectionType(node: object | null | undefined, opts?: object | null): asserts node is TSIntersectionType;
 export function isTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): node is TSIntrinsicKeyword;
-// export function assertTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSIntrinsicKeyword;
+export function assertTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSIntrinsicKeyword;
 export function isTSLiteralType(node: object | null | undefined, opts?: object | null): node is TSLiteralType;
-// export function assertTSLiteralType(node: object | null | undefined, opts?: object | null): asserts node is TSLiteralType;
+export function assertTSLiteralType(node: object | null | undefined, opts?: object | null): asserts node is TSLiteralType;
 export function isTSMappedType(node: object | null | undefined, opts?: object | null): node is TSMappedType;
-// export function assertTSMappedType(node: object | null | undefined, opts?: object | null): asserts node is TSMappedType;
+export function assertTSMappedType(node: object | null | undefined, opts?: object | null): asserts node is TSMappedType;
 export function isTSMethodSignature(node: object | null | undefined, opts?: object | null): node is TSMethodSignature;
-// export function assertTSMethodSignature(node: object | null | undefined, opts?: object | null): asserts node is TSMethodSignature;
+export function assertTSMethodSignature(node: object | null | undefined, opts?: object | null): asserts node is TSMethodSignature;
 export function isTSModuleBlock(node: object | null | undefined, opts?: object | null): node is TSModuleBlock;
-// export function assertTSModuleBlock(node: object | null | undefined, opts?: object | null): asserts node is TSModuleBlock;
+export function assertTSModuleBlock(node: object | null | undefined, opts?: object | null): asserts node is TSModuleBlock;
 export function isTSModuleDeclaration(node: object | null | undefined, opts?: object | null): node is TSModuleDeclaration;
-// export function assertTSModuleDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSModuleDeclaration;
+export function assertTSModuleDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSModuleDeclaration;
 export function isTSNamedTupleMember(node: object | null | undefined, opts?: object | null): node is TSNamedTupleMember;
-// export function assertTSNamedTupleMember(node: object | null | undefined, opts?: object | null): asserts node is TSNamedTupleMember;
+export function assertTSNamedTupleMember(node: object | null | undefined, opts?: object | null): asserts node is TSNamedTupleMember;
 export function isTSNamespaceExportDeclaration(node: object | null | undefined, opts?: object | null): node is TSNamespaceExportDeclaration;
-// export function assertTSNamespaceExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSNamespaceExportDeclaration;
+export function assertTSNamespaceExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSNamespaceExportDeclaration;
 export function isTSNeverKeyword(node: object | null | undefined, opts?: object | null): node is TSNeverKeyword;
-// export function assertTSNeverKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNeverKeyword;
+export function assertTSNeverKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNeverKeyword;
 export function isTSNonNullExpression(node: object | null | undefined, opts?: object | null): node is TSNonNullExpression;
-// export function assertTSNonNullExpression(node: object | null | undefined, opts?: object | null): asserts node is TSNonNullExpression;
+export function assertTSNonNullExpression(node: object | null | undefined, opts?: object | null): asserts node is TSNonNullExpression;
 export function isTSNullKeyword(node: object | null | undefined, opts?: object | null): node is TSNullKeyword;
-// export function assertTSNullKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNullKeyword;
+export function assertTSNullKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNullKeyword;
 export function isTSNumberKeyword(node: object | null | undefined, opts?: object | null): node is TSNumberKeyword;
-// export function assertTSNumberKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNumberKeyword;
+export function assertTSNumberKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNumberKeyword;
 export function isTSObjectKeyword(node: object | null | undefined, opts?: object | null): node is TSObjectKeyword;
-// export function assertTSObjectKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSObjectKeyword;
+export function assertTSObjectKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSObjectKeyword;
 export function isTSOptionalType(node: object | null | undefined, opts?: object | null): node is TSOptionalType;
-// export function assertTSOptionalType(node: object | null | undefined, opts?: object | null): asserts node is TSOptionalType;
+export function assertTSOptionalType(node: object | null | undefined, opts?: object | null): asserts node is TSOptionalType;
 export function isTSParameterProperty(node: object | null | undefined, opts?: object | null): node is TSParameterProperty;
-// export function assertTSParameterProperty(node: object | null | undefined, opts?: object | null): asserts node is TSParameterProperty;
+export function assertTSParameterProperty(node: object | null | undefined, opts?: object | null): asserts node is TSParameterProperty;
 export function isTSParenthesizedType(node: object | null | undefined, opts?: object | null): node is TSParenthesizedType;
-// export function assertTSParenthesizedType(node: object | null | undefined, opts?: object | null): asserts node is TSParenthesizedType;
+export function assertTSParenthesizedType(node: object | null | undefined, opts?: object | null): asserts node is TSParenthesizedType;
 export function isTSPropertySignature(node: object | null | undefined, opts?: object | null): node is TSPropertySignature;
-// export function assertTSPropertySignature(node: object | null | undefined, opts?: object | null): asserts node is TSPropertySignature;
+export function assertTSPropertySignature(node: object | null | undefined, opts?: object | null): asserts node is TSPropertySignature;
 export function isTSQualifiedName(node: object | null | undefined, opts?: object | null): node is TSQualifiedName;
-// export function assertTSQualifiedName(node: object | null | undefined, opts?: object | null): asserts node is TSQualifiedName;
+export function assertTSQualifiedName(node: object | null | undefined, opts?: object | null): asserts node is TSQualifiedName;
 export function isTSRestType(node: object | null | undefined, opts?: object | null): node is TSRestType;
-// export function assertTSRestType(node: object | null | undefined, opts?: object | null): asserts node is TSRestType;
+export function assertTSRestType(node: object | null | undefined, opts?: object | null): asserts node is TSRestType;
 export function isTSStringKeyword(node: object | null | undefined, opts?: object | null): node is TSStringKeyword;
-// export function assertTSStringKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSStringKeyword;
+export function assertTSStringKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSStringKeyword;
 export function isTSSymbolKeyword(node: object | null | undefined, opts?: object | null): node is TSSymbolKeyword;
-// export function assertTSSymbolKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSSymbolKeyword;
+export function assertTSSymbolKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSSymbolKeyword;
 export function isTSThisType(node: object | null | undefined, opts?: object | null): node is TSThisType;
-// export function assertTSThisType(node: object | null | undefined, opts?: object | null): asserts node is TSThisType;
+export function assertTSThisType(node: object | null | undefined, opts?: object | null): asserts node is TSThisType;
 export function isTSTupleType(node: object | null | undefined, opts?: object | null): node is TSTupleType;
-// export function assertTSTupleType(node: object | null | undefined, opts?: object | null): asserts node is TSTupleType;
+export function assertTSTupleType(node: object | null | undefined, opts?: object | null): asserts node is TSTupleType;
 export function isTSType(node: object | null | undefined, opts?: object | null): node is TSType;
-// export function assertTSType(node: object | null | undefined, opts?: object | null): asserts node is TSType;
+export function assertTSType(node: object | null | undefined, opts?: object | null): asserts node is TSType;
 export function isTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): node is TSTypeAliasDeclaration;
-// export function assertTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAliasDeclaration;
+export function assertTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAliasDeclaration;
 export function isTSTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TSTypeAnnotation;
-// export function assertTSTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAnnotation;
+export function assertTSTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAnnotation;
 export function isTSTypeAssertion(node: object | null | undefined, opts?: object | null): node is TSTypeAssertion;
-// export function assertTSTypeAssertion(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAssertion;
+export function assertTSTypeAssertion(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAssertion;
 export function isTSTypeElement(node: object | null | undefined, opts?: object | null): node is TSTypeElement;
-// export function assertTSTypeElement(node: object | null | undefined, opts?: object | null): asserts node is TSTypeElement;
+export function assertTSTypeElement(node: object | null | undefined, opts?: object | null): asserts node is TSTypeElement;
 export function isTSTypeLiteral(node: object | null | undefined, opts?: object | null): node is TSTypeLiteral;
-// export function assertTSTypeLiteral(node: object | null | undefined, opts?: object | null): asserts node is TSTypeLiteral;
+export function assertTSTypeLiteral(node: object | null | undefined, opts?: object | null): asserts node is TSTypeLiteral;
 export function isTSTypeOperator(node: object | null | undefined, opts?: object | null): node is TSTypeOperator;
-// export function assertTSTypeOperator(node: object | null | undefined, opts?: object | null): asserts node is TSTypeOperator;
+export function assertTSTypeOperator(node: object | null | undefined, opts?: object | null): asserts node is TSTypeOperator;
 export function isTSTypeParameter(node: object | null | undefined, opts?: object | null): node is TSTypeParameter;
-// export function assertTSTypeParameter(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameter;
+export function assertTSTypeParameter(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameter;
 export function isTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): node is TSTypeParameterDeclaration;
-// export function assertTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameterDeclaration;
+export function assertTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameterDeclaration;
 export function isTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): node is TSTypeParameterInstantiation;
-// export function assertTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameterInstantiation;
+export function assertTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameterInstantiation;
 export function isTSTypePredicate(node: object | null | undefined, opts?: object | null): node is TSTypePredicate;
-// export function assertTSTypePredicate(node: object | null | undefined, opts?: object | null): asserts node is TSTypePredicate;
+export function assertTSTypePredicate(node: object | null | undefined, opts?: object | null): asserts node is TSTypePredicate;
 export function isTSTypeQuery(node: object | null | undefined, opts?: object | null): node is TSTypeQuery;
-// export function assertTSTypeQuery(node: object | null | undefined, opts?: object | null): asserts node is TSTypeQuery;
+export function assertTSTypeQuery(node: object | null | undefined, opts?: object | null): asserts node is TSTypeQuery;
 export function isTSTypeReference(node: object | null | undefined, opts?: object | null): node is TSTypeReference;
-// export function assertTSTypeReference(node: object | null | undefined, opts?: object | null): asserts node is TSTypeReference;
+export function assertTSTypeReference(node: object | null | undefined, opts?: object | null): asserts node is TSTypeReference;
 export function isTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): node is TSUndefinedKeyword;
-// export function assertTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSUndefinedKeyword;
+export function assertTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSUndefinedKeyword;
 export function isTSUnionType(node: object | null | undefined, opts?: object | null): node is TSUnionType;
-// export function assertTSUnionType(node: object | null | undefined, opts?: object | null): asserts node is TSUnionType;
+export function assertTSUnionType(node: object | null | undefined, opts?: object | null): asserts node is TSUnionType;
 export function isTSUnknownKeyword(node: object | null | undefined, opts?: object | null): node is TSUnknownKeyword;
-// export function assertTSUnknownKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSUnknownKeyword;
+export function assertTSUnknownKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSUnknownKeyword;
 export function isTSVoidKeyword(node: object | null | undefined, opts?: object | null): node is TSVoidKeyword;
-// export function assertTSVoidKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSVoidKeyword;
+export function assertTSVoidKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSVoidKeyword;
 export function isTaggedTemplateExpression(node: object | null | undefined, opts?: object | null): node is TaggedTemplateExpression;
-// export function assertTaggedTemplateExpression(node: object | null | undefined, opts?: object | null): asserts node is TaggedTemplateExpression;
+export function assertTaggedTemplateExpression(node: object | null | undefined, opts?: object | null): asserts node is TaggedTemplateExpression;
 export function isTemplateElement(node: object | null | undefined, opts?: object | null): node is TemplateElement;
-// export function assertTemplateElement(node: object | null | undefined, opts?: object | null): asserts node is TemplateElement;
+export function assertTemplateElement(node: object | null | undefined, opts?: object | null): asserts node is TemplateElement;
 export function isTemplateLiteral(node: object | null | undefined, opts?: object | null): node is TemplateLiteral;
-// export function assertTemplateLiteral(node: object | null | undefined, opts?: object | null): asserts node is TemplateLiteral;
+export function assertTemplateLiteral(node: object | null | undefined, opts?: object | null): asserts node is TemplateLiteral;
 export function isTerminatorless(node: object | null | undefined, opts?: object | null): node is Terminatorless;
-// export function assertTerminatorless(node: object | null | undefined, opts?: object | null): asserts node is Terminatorless;
+export function assertTerminatorless(node: object | null | undefined, opts?: object | null): asserts node is Terminatorless;
 export function isThisExpression(node: object | null | undefined, opts?: object | null): node is ThisExpression;
-// export function assertThisExpression(node: object | null | undefined, opts?: object | null): asserts node is ThisExpression;
+export function assertThisExpression(node: object | null | undefined, opts?: object | null): asserts node is ThisExpression;
 export function isThisTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ThisTypeAnnotation;
-// export function assertThisTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ThisTypeAnnotation;
+export function assertThisTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ThisTypeAnnotation;
 export function isThrowStatement(node: object | null | undefined, opts?: object | null): node is ThrowStatement;
-// export function assertThrowStatement(node: object | null | undefined, opts?: object | null): asserts node is ThrowStatement;
+export function assertThrowStatement(node: object | null | undefined, opts?: object | null): asserts node is ThrowStatement;
 export function isTryStatement(node: object | null | undefined, opts?: object | null): node is TryStatement;
-// export function assertTryStatement(node: object | null | undefined, opts?: object | null): asserts node is TryStatement;
+export function assertTryStatement(node: object | null | undefined, opts?: object | null): asserts node is TryStatement;
 export function isTupleExpression(node: object | null | undefined, opts?: object | null): node is TupleExpression;
-// export function assertTupleExpression(node: object | null | undefined, opts?: object | null): asserts node is TupleExpression;
+export function assertTupleExpression(node: object | null | undefined, opts?: object | null): asserts node is TupleExpression;
 export function isTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TupleTypeAnnotation;
-// export function assertTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TupleTypeAnnotation;
+export function assertTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TupleTypeAnnotation;
 export function isTypeAlias(node: object | null | undefined, opts?: object | null): node is TypeAlias;
-// export function assertTypeAlias(node: object | null | undefined, opts?: object | null): asserts node is TypeAlias;
+export function assertTypeAlias(node: object | null | undefined, opts?: object | null): asserts node is TypeAlias;
 export function isTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TypeAnnotation;
-// export function assertTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TypeAnnotation;
+export function assertTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TypeAnnotation;
 export function isTypeCastExpression(node: object | null | undefined, opts?: object | null): node is TypeCastExpression;
-// export function assertTypeCastExpression(node: object | null | undefined, opts?: object | null): asserts node is TypeCastExpression;
+export function assertTypeCastExpression(node: object | null | undefined, opts?: object | null): asserts node is TypeCastExpression;
 export function isTypeParameter(node: object | null | undefined, opts?: object | null): node is TypeParameter;
-// export function assertTypeParameter(node: object | null | undefined, opts?: object | null): asserts node is TypeParameter;
+export function assertTypeParameter(node: object | null | undefined, opts?: object | null): asserts node is TypeParameter;
 export function isTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): node is TypeParameterDeclaration;
-// export function assertTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TypeParameterDeclaration;
+export function assertTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TypeParameterDeclaration;
 export function isTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): node is TypeParameterInstantiation;
-// export function assertTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): asserts node is TypeParameterInstantiation;
+export function assertTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): asserts node is TypeParameterInstantiation;
 export function isTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TypeofTypeAnnotation;
-// export function assertTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TypeofTypeAnnotation;
+export function assertTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TypeofTypeAnnotation;
 export function isUnaryExpression(node: object | null | undefined, opts?: object | null): node is UnaryExpression;
-// export function assertUnaryExpression(node: object | null | undefined, opts?: object | null): asserts node is UnaryExpression;
+export function assertUnaryExpression(node: object | null | undefined, opts?: object | null): asserts node is UnaryExpression;
 export function isUnaryLike(node: object | null | undefined, opts?: object | null): node is UnaryLike;
-// export function assertUnaryLike(node: object | null | undefined, opts?: object | null): asserts node is UnaryLike;
+export function assertUnaryLike(node: object | null | undefined, opts?: object | null): asserts node is UnaryLike;
 export function isUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is UnionTypeAnnotation;
-// export function assertUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is UnionTypeAnnotation;
+export function assertUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is UnionTypeAnnotation;
 export function isUpdateExpression(node: object | null | undefined, opts?: object | null): node is UpdateExpression;
-// export function assertUpdateExpression(node: object | null | undefined, opts?: object | null): asserts node is UpdateExpression;
+export function assertUpdateExpression(node: object | null | undefined, opts?: object | null): asserts node is UpdateExpression;
 export function isUserWhitespacable(node: object | null | undefined, opts?: object | null): node is UserWhitespacable;
-// export function assertUserWhitespacable(node: object | null | undefined, opts?: object | null): asserts node is UserWhitespacable;
+export function assertUserWhitespacable(node: object | null | undefined, opts?: object | null): asserts node is UserWhitespacable;
 export function isV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): node is V8IntrinsicIdentifier;
-// export function assertV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): asserts node is V8IntrinsicIdentifier;
+export function assertV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): asserts node is V8IntrinsicIdentifier;
 export function isVariableDeclaration(node: object | null | undefined, opts?: object | null): node is VariableDeclaration;
-// export function assertVariableDeclaration(node: object | null | undefined, opts?: object | null): asserts node is VariableDeclaration;
+export function assertVariableDeclaration(node: object | null | undefined, opts?: object | null): asserts node is VariableDeclaration;
 export function isVariableDeclarator(node: object | null | undefined, opts?: object | null): node is VariableDeclarator;
-// export function assertVariableDeclarator(node: object | null | undefined, opts?: object | null): asserts node is VariableDeclarator;
+export function assertVariableDeclarator(node: object | null | undefined, opts?: object | null): asserts node is VariableDeclarator;
 export function isVariance(node: object | null | undefined, opts?: object | null): node is Variance;
-// export function assertVariance(node: object | null | undefined, opts?: object | null): asserts node is Variance;
+export function assertVariance(node: object | null | undefined, opts?: object | null): asserts node is Variance;
 export function isVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): node is VoidTypeAnnotation;
-// export function assertVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is VoidTypeAnnotation;
+export function assertVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is VoidTypeAnnotation;
 export function isWhile(node: object | null | undefined, opts?: object | null): node is While;
-// export function assertWhile(node: object | null | undefined, opts?: object | null): asserts node is While;
+export function assertWhile(node: object | null | undefined, opts?: object | null): asserts node is While;
 export function isWhileStatement(node: object | null | undefined, opts?: object | null): node is WhileStatement;
-// export function assertWhileStatement(node: object | null | undefined, opts?: object | null): asserts node is WhileStatement;
+export function assertWhileStatement(node: object | null | undefined, opts?: object | null): asserts node is WhileStatement;
 export function isWithStatement(node: object | null | undefined, opts?: object | null): node is WithStatement;
-// export function assertWithStatement(node: object | null | undefined, opts?: object | null): asserts node is WithStatement;
+export function assertWithStatement(node: object | null | undefined, opts?: object | null): asserts node is WithStatement;
 export function isYieldExpression(node: object | null | undefined, opts?: object | null): node is YieldExpression;
-// export function assertYieldExpression(node: object | null | undefined, opts?: object | null): asserts node is YieldExpression;
-// export function assertNode(obj: any): asserts obj is Node
+export function assertYieldExpression(node: object | null | undefined, opts?: object | null): asserts node is YieldExpression;
+export function assertNode(obj: any): asserts obj is Node
 export function createTypeAnnotationBasedOnTypeof(type: 'string' | 'number' | 'undefined' | 'boolean' | 'function' | 'object' | 'symbol'): StringTypeAnnotation | VoidTypeAnnotation | NumberTypeAnnotation | BooleanTypeAnnotation | GenericTypeAnnotation
 export function createUnionTypeAnnotation<T extends FlowType>(types: [T]): T
 export function createFlowUnionType<T extends FlowType>(types: [T]): T
