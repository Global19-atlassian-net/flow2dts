// @flow
type PlatformType = 'iOS' | 'android';

type SchemaType = $ReadOnly<
  {|
    modules: $ReadOnly<
      {|
        [hasteModuleName: string]: ComponentSchema | NativeModuleSchema,
      |},
    >,
  |},
>;

type DoubleTypeAnnotation = $ReadOnly<
  {|
    type: 'DoubleTypeAnnotation',
  |},
>;

type FloatTypeAnnotation = $ReadOnly<
  {|
    type: 'FloatTypeAnnotation',
  |},
>;

type BooleanTypeAnnotation = $ReadOnly<
  {|
    type: 'BooleanTypeAnnotation',
  |},
>;

type Int32TypeAnnotation = $ReadOnly<
  {|
    type: 'Int32TypeAnnotation',
  |},
>;

type StringTypeAnnotation = $ReadOnly<
  {|
    type: 'StringTypeAnnotation',
  |},
>;

type StringEnumTypeAnnotation = $ReadOnly<
  {|
    type: 'StringEnumTypeAnnotation',
    options: $ReadOnlyArray<string>,
  |},
>;

type VoidTypeAnnotation = $ReadOnly<
  {|
    type: 'VoidTypeAnnotation',
  |},
>;

type ObjectTypeAnnotation<+T> = $ReadOnly<
  {|
    type: 'ObjectTypeAnnotation',
    properties: $ReadOnlyArray<NamedShape<T>>,
  |},
>;

type FunctionTypeAnnotation<+P, +R> = $ReadOnly<
  {|
    type: 'FunctionTypeAnnotation',
    params: $ReadOnlyArray<NamedShape<P>>,
    returnTypeAnnotation: R,
  |},
>;

type NamedShape<+T> = $ReadOnly<
  {
    name: string,
    optional: boolean,
    typeAnnotation: T,
  },
>;

type ComponentSchema = $ReadOnly<
  {|
    type: 'Component',
    components: $ReadOnly<
      {|
        [componentName: string]: ComponentShape,
      |},
    >,
  |},
>;

type ComponentShape = $ReadOnly<
  {|
    ...OptionsShape,
    extendsProps: $ReadOnlyArray<ExtendsPropsShape>,
    events: $ReadOnlyArray<EventTypeShape>,
    props: $ReadOnlyArray<NamedShape<PropTypeAnnotation>>,
    commands: $ReadOnlyArray<NamedShape<CommandTypeAnnotation>>,
  |},
>;

type OptionsShape = $ReadOnly<
  {|
    interfaceOnly?: boolean,
    
    // Use for components with no current paper rename in progress
    // Does not check for new name
    paperComponentName?: string,
    
    // Use for components that are not used on other platforms.
    excludedPlatforms?: $ReadOnlyArray<PlatformType>,
    
    // Use for components currently being renamed in paper
    // Will use new name if it is available and fallback to this name
    paperComponentNameDeprecated?: string,
  |},
>;

type ExtendsPropsShape = $ReadOnly<
  {|
    type: 'ReactNativeBuiltInType',
    knownTypeName: 'ReactNativeCoreViewProps',
  |},
>;

type EventTypeShape = $ReadOnly<
  {|
    name: string,
    bubblingType: 'direct' | 'bubble',
    optional: boolean,
    paperTopLevelNameDeprecated?: string,
    typeAnnotation: $ReadOnly<
      {|
        type: 'EventTypeAnnotation',
        argument?: ObjectTypeAnnotation<EventTypeAnnotation>,
      |},
    >,
  |},
>;

type EventTypeAnnotation = 
  | BooleanTypeAnnotation
  | StringTypeAnnotation
  | DoubleTypeAnnotation
  | FloatTypeAnnotation
  | Int32TypeAnnotation
  | StringEnumTypeAnnotation
  | ObjectTypeAnnotation<EventTypeAnnotation>;

type PropTypeAnnotation = 
  | $ReadOnly<
    {|
      type: 'BooleanTypeAnnotation',
      default: boolean | null,
    |},
  >
  | $ReadOnly<
    {|
      type: 'StringTypeAnnotation',
      default: string | null,
    |},
  >
  | $ReadOnly<
    {|
      type: 'DoubleTypeAnnotation',
      default: number,
    |},
  >
  | $ReadOnly<
    {|
      type: 'FloatTypeAnnotation',
      default: number | null,
    |},
  >
  | $ReadOnly<
    {|
      type: 'Int32TypeAnnotation',
      default: number,
    |},
  >
  | $ReadOnly<
    {|
      type: 'StringEnumTypeAnnotation',
      default: string,
      options: $ReadOnlyArray<string>,
    |},
  >
  | $ReadOnly<
    {|
      type: 'Int32EnumTypeAnnotation',
      default: number,
      options: $ReadOnlyArray<number>,
    |},
  >
  | ReservedPropTypeAnnotation
  | ObjectTypeAnnotation<PropTypeAnnotation>
  | $ReadOnly<
    {|
      type: 'ArrayTypeAnnotation',
      elementType: 
        | BooleanTypeAnnotation
        | StringTypeAnnotation
        | DoubleTypeAnnotation
        | FloatTypeAnnotation
        | Int32TypeAnnotation
        | $ReadOnly<
          {|
            type: 'StringEnumTypeAnnotation',
            default: string,
            options: $ReadOnlyArray<string>,
          |},
        >
        | ObjectTypeAnnotation<PropTypeAnnotation>
        | ReservedPropTypeAnnotation
        | $ReadOnly<
          {|
            type: 'ArrayTypeAnnotation',
            elementType: ObjectTypeAnnotation<PropTypeAnnotation>,
          |},
        >,
    |},
  >;

type ReservedPropTypeAnnotation = $ReadOnly<
  {|
    type: 'ReservedPropTypeAnnotation',
    name: 
      | 'ColorPrimitive'
      | 'ImageSourcePrimitive'
      | 'PointPrimitive'
      | 'EdgeInsetsPrimitive',
  |},
>;

type CommandTypeAnnotation = FunctionTypeAnnotation<
  CommandParamTypeAnnotation,
  VoidTypeAnnotation,
>;

type CommandParamTypeAnnotation = 
  | ReservedTypeAnnotation
  | BooleanTypeAnnotation
  | Int32TypeAnnotation
  | DoubleTypeAnnotation
  | FloatTypeAnnotation
  | StringTypeAnnotation;

type ReservedTypeAnnotation = $ReadOnly<
  {|
    type: 'ReservedTypeAnnotation',
    name: 'RootTag' // Union with more custom types.
    ,
  |},
>;

type Nullable<+T: NativeModuleTypeAnnotation> = NullableTypeAnnotation<T> | T;

type NullableTypeAnnotation<+T: NativeModuleTypeAnnotation> = $ReadOnly<
  {|
    type: 'NullableTypeAnnotation',
    typeAnnotation: T,
  |},
>;

type NativeModuleSchema = $ReadOnly<
  {|
    type: 'NativeModule',
    aliases: NativeModuleAliasMap,
    spec: NativeModuleSpec,
    moduleNames: $ReadOnlyArray<string>,
    // Use for modules that are not used on other platforms.
    // TODO: It's clearer to define `restrictedToPlatforms` instead, but
    // `excludedPlatforms` is used here to be consistent with ComponentSchema.
    excludedPlatforms?: $ReadOnlyArray<PlatformType>,
  |},
>;

type NativeModuleSpec = $ReadOnly<
  {|
    properties: $ReadOnlyArray<NativeModulePropertyShape>,
  |},
>;

type NativeModulePropertyShape = NamedShape<
  Nullable<NativeModuleFunctionTypeAnnotation>,
>;

type NativeModuleAliasMap = $ReadOnly<
  {|
    [aliasName: string]: NativeModuleObjectTypeAnnotation,
  |},
>;

type NativeModuleFunctionTypeAnnotation = FunctionTypeAnnotation<
  Nullable<NativeModuleParamTypeAnnotation>,
  Nullable<NativeModuleReturnTypeAnnotation>,
>;

type NativeModuleObjectTypeAnnotation = ObjectTypeAnnotation<
  Nullable<NativeModuleBaseTypeAnnotation>,
>;

type NativeModuleArrayTypeAnnotation<
  +T: Nullable<NativeModuleBaseTypeAnnotation>,
> = $ReadOnly<
  {|
    type: 'ArrayTypeAnnotation',
    /**
   * TODO(T72031674): Migrate all our NativeModule specs to not use
   * invalid Array ElementTypes. Then, make the elementType required.
   */
    elementType?: T,
  |},
>;

type NativeModuleStringTypeAnnotation = $ReadOnly<
  {|
    type: 'StringTypeAnnotation',
  |},
>;

type NativeModuleNumberTypeAnnotation = $ReadOnly<
  {|
    type: 'NumberTypeAnnotation',
  |},
>;

type NativeModuleInt32TypeAnnotation = $ReadOnly<
  {|
    type: 'Int32TypeAnnotation',
  |},
>;

type NativeModuleDoubleTypeAnnotation = $ReadOnly<
  {|
    type: 'DoubleTypeAnnotation',
  |},
>;

type NativeModuleFloatTypeAnnotation = $ReadOnly<
  {|
    type: 'FloatTypeAnnotation',
  |},
>;

type NativeModuleBooleanTypeAnnotation = $ReadOnly<
  {|
    type: 'BooleanTypeAnnotation',
  |},
>;

type NativeModuleGenericObjectTypeAnnotation = $ReadOnly<
  {|
    type: 'GenericObjectTypeAnnotation',
  |},
>;

type NativeModuleTypeAliasTypeAnnotation = $ReadOnly<
  {|
    type: 'TypeAliasTypeAnnotation',
    name: string,
  |},
>;

type NativeModulePromiseTypeAnnotation = $ReadOnly<
  {|
    type: 'PromiseTypeAnnotation',
  |},
>;

type NativeModuleBaseTypeAnnotation = 
  | NativeModuleStringTypeAnnotation
  | NativeModuleNumberTypeAnnotation
  | NativeModuleInt32TypeAnnotation
  | NativeModuleDoubleTypeAnnotation
  | NativeModuleFloatTypeAnnotation
  | NativeModuleBooleanTypeAnnotation
  | NativeModuleGenericObjectTypeAnnotation
  | ReservedTypeAnnotation
  | NativeModuleTypeAliasTypeAnnotation
  | NativeModuleArrayTypeAnnotation<Nullable<NativeModuleBaseTypeAnnotation>>
  | NativeModuleObjectTypeAnnotation;

type NativeModuleParamTypeAnnotation = 
  | NativeModuleBaseTypeAnnotation
  | NativeModuleParamOnlyTypeAnnotation;

type NativeModuleReturnTypeAnnotation = 
  | NativeModuleBaseTypeAnnotation
  | NativeModuleReturnOnlyTypeAnnotation;

type NativeModuleTypeAnnotation = 
  | NativeModuleBaseTypeAnnotation
  | NativeModuleParamOnlyTypeAnnotation
  | NativeModuleReturnOnlyTypeAnnotation;

type NativeModuleParamOnlyTypeAnnotation = NativeModuleFunctionTypeAnnotation;
type NativeModuleReturnOnlyTypeAnnotation = 
  | NativeModulePromiseTypeAnnotation
  | VoidTypeAnnotation;
export type {PlatformType};

export type {SchemaType};

export type {DoubleTypeAnnotation};

export type {FloatTypeAnnotation};

export type {BooleanTypeAnnotation};

export type {Int32TypeAnnotation};

export type {StringTypeAnnotation};

export type {StringEnumTypeAnnotation};

export type {VoidTypeAnnotation};

export type {NamedShape};

export type {ComponentSchema};

export type {ComponentShape};

export type {OptionsShape};

export type {ExtendsPropsShape};

export type {EventTypeShape};

export type {EventTypeAnnotation};

export type {PropTypeAnnotation};

export type {CommandTypeAnnotation};

export type {CommandParamTypeAnnotation};

export type {ReservedTypeAnnotation};

export type {Nullable};

export type {NullableTypeAnnotation};

export type {NativeModuleSchema};

export type {NativeModulePropertyShape};

export type {NativeModuleAliasMap};

export type {NativeModuleFunctionTypeAnnotation};

export type {NativeModuleObjectTypeAnnotation};

export type {NativeModuleArrayTypeAnnotation};

export type {NativeModuleStringTypeAnnotation};

export type {NativeModuleNumberTypeAnnotation};

export type {NativeModuleInt32TypeAnnotation};

export type {NativeModuleDoubleTypeAnnotation};

export type {NativeModuleFloatTypeAnnotation};

export type {NativeModuleBooleanTypeAnnotation};

export type {NativeModuleGenericObjectTypeAnnotation};

export type {NativeModuleTypeAliasTypeAnnotation};

export type {NativeModulePromiseTypeAnnotation};

export type {NativeModuleBaseTypeAnnotation};

export type {NativeModuleParamTypeAnnotation};

export type {NativeModuleReturnTypeAnnotation};

export type {NativeModuleTypeAnnotation};
