// @flow
import type {EventTypeShape} from "../../../CodegenSchema.js";
import type {NamedShape} from "../../../CodegenSchema.js";
import type {CommandTypeAnnotation} from "../../../CodegenSchema.js";
import type {PropTypeAnnotation} from "../../../CodegenSchema.js";
import type {ExtendsPropsShape} from "../../../CodegenSchema.js";
import type {SchemaType} from "../../../CodegenSchema.js";
import type {OptionsShape} from "../../../CodegenSchema.js";

type ComponentSchemaBuilderConfig = $ReadOnly<
  {|
    filename: string,
    componentName: string,
    extendsProps: $ReadOnlyArray<ExtendsPropsShape>,
    events: $ReadOnlyArray<EventTypeShape>,
    props: $ReadOnlyArray<NamedShape<PropTypeAnnotation>>,
    commands: $ReadOnlyArray<NamedShape<CommandTypeAnnotation>>,
    options?: ?OptionsShape,
  |},
>;

declare function wrapComponentSchema(ComponentSchemaBuilderConfig): SchemaType;
export type {ComponentSchemaBuilderConfig};

declare module.exports: {|
  wrapComponentSchema: typeof wrapComponentSchema,
|};
